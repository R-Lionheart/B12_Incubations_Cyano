#
# Returns:
#   blank.matcher: new CSV with any duplicate values separated
#   into their own rows.
#
blank.matcher <- do.call("rbind", Map(data.frame,
Blank.Name = strsplit(as.character(blank.matcher$Blank.Name), ","),
Replicate.Name = (blank.matcher$Replicate.Name))
)
blank.matcher <- blank.matcher[c(2, 1)]
return(blank.matcher)
}
# Things to Return --------------------------------------------------------
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.HILIC.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = '*.csv'))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Match QC'd HILIC data with Internal Standards list -----------------------------------------------------------------
HILIC.withIS <- HILIC.QC %>%
filter(Metabolite.name %in% Internal.Standards$Compound.Name)
HILIC.NoIS <- HILIC.QC %>%
filter(!Metabolite.name %in% Internal.Standards$Compound.Name)
# Create HILICs Internal Standard data -----------------------------------------------------------------
HILIC.IS.data <- HILIC.withIS %>%
select(Replicate.Name, Metabolite.name, Area.with.QC) %>%
mutate(Mass.Feature = Metabolite.name) %>%
select(-Metabolite.name)
#filter(!MassFeature == "Guanosine Monophosphate, 15N5")
# Add injection volume -----------------------------------------------------------------
# SHOULD THIS GO AT THE TOP
SampKey <- SampKey.all %>%
filter(Replicate.Name %in% HILIC.IS.data$Replicate.Name) %>%
select(Replicate.Name, Bio.Normalization) %>%
mutate(Mass.Feature = "Inj_vol",
Area.with.QC = Bio.Normalization) %>%
select(Replicate.Name, Area.with.QC, Mass.Feature)
# Create Internal standard data to identify problematic compounds/replicates-----------------------------------------------------------------
HILIC.IS.data <- rbind(HILIC.IS.data, SampKey)
# here is where we would hypothetically remove troublesome compounds.
# Identify internal standards without an Area, i.e. any NA values.
IS.Issues <- HILIC.IS.data[is.na(HILIC.IS.data$Area.with.QC), ]
# Visualize raw areas of Internal Standards -----------------------------------------------------------------
IS.Raw.Area.Plot <- ggplot(HILIC.IS.data, aes(x = Replicate.Name, y = Area.with.QC)) +
geom_bar(stat = "identity") +
facet_wrap( ~Mass.Feature, scales = "free_y") +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 10),
legend.position = "top",
strip.text = element_text(size = 10))+
ggtitle("Internal Standard Raw Areas")
# print(IS.Raw.Area.Plot)
# Edit data so names match-----------------------------------------------------------------
# HILIC.IS.data <- HILIC.IS.data %>%
#   mutate(Replicate.Name = Replicate.Name %>%
#            str_replace("-",".")) %>%
#   arrange(ReplicateName)
HILIC.long  <- HILIC.NoIS %>%
rename(Mass.Feature = Metabolite.name) %>%
select(Replicate.Name, Mass.Feature, Area.with.QC) %>%
arrange(Replicate.Name)
# Actual script goes here
source("B12_Inc_Functions.R")
# Import all MSDial files --------------------------------------------------
filenames <- RemoveCsv(list.files(path = 'data_raw', pattern = '*.csv'))
for (i in filenames) {
filepath <- file.path('data_raw', paste(i, ".csv", sep = ""))
assign(make.names(i), read.csv(filepath, stringsAsFactors = FALSE))
}
matching.variable <- "hilic"
columns.to.drop <- c('Average.Rt.min.', 'Formula', 'Ontology', 'INCHIKEY',
'SMILES', 'Isotope.tracking.parent.ID', 'Isotope.tracking.weight.number',
'MS1.isotopic.spectrum', 'MS.MS.spectrum', 'Average.Mz', 'Post.curation.result',
'Fill..', 'Annotation.tag..VS1.0.', 'RT.matched',
'm.z.matched', 'MS.MS.matched', 'Manually.modified', 'Total.score',
'RT.similarity', 'Dot.product', 'Reverse.dot.product', 'Fragment.presence..')
# Set header, filter unknowns ---------------------------------------
runs <- grep(matching.variable, names(.GlobalEnv), value = TRUE, ignore.case = TRUE)
runlist <- do.call("list", mget(runs))
headers.set <- lapply(names(runlist), function(x) SetHeader(runlist[[x]]))
names(headers.set) <- runs
for (df in seq_along(headers.set)) {
headers.set[[df]] <- headers.set[[df]] %>% filter(!Metabolite.name == "Unknown")
headers.set[[df]] <- headers.set[[df]] %>% select(-one_of(columns.to.drop))
}
# Change variable classes -------------------------------------------------
classes.changed <- lapply(names(headers.set), function(x) ChangeClasses(headers.set[[x]]))
names(classes.changed) <- runs
list2env(classes.changed, globalenv())
######
# START HERE #
######
# Rearrange datasets ------------------------------------------------------
# Positive
SN_HILIC.POS_B12.Inc <- SN_HILIC.POS_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "SN.Value",
starts_with("X")) %>%
select(Replicate.Name, SN.Value, everything())
RT_HILIC.POS_B12.Inc <- RT_HILIC.POS_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "RT.Value",
starts_with("X")) %>%
select(Replicate.Name, RT.Value, everything())
Area_HILIC.POS_B12.Inc <- Area_HILIC.POS_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "Area.Value",
starts_with("X")) %>%
select(Replicate.Name, Area.Value, everything())
Mz_HILIC.POS_B12.Inc <- Mz_HILIC.POS_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "MZ.Value",
starts_with("X")) %>%
select(Replicate.Name, MZ.Value, everything())
# Negative
SN_HILIC.NEG_B12.Inc <- SN_HILIC.NEG_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "SN.Value",
starts_with("X")) %>%
select(Replicate.Name, SN.Value, everything())
RT_HILIC.NEG_B12.Inc <- RT_HILIC.NEG_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "RT.Value",
starts_with("X")) %>%
select(Replicate.Name, RT.Value, everything())
Area_HILIC.NEG_B12.Inc <- Area_HILIC.NEG_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "Area.Value",
starts_with("X")) %>%
select(Replicate.Name, Area.Value, everything())
Mz_HILIC.NEG_B12.Inc <- Mz_HILIC.NEG_B12.Inc %>%
tidyr::gather(
key = "Replicate.Name",
value = "MZ.Value",
starts_with("X")) %>%
select(Replicate.Name, MZ.Value, everything())
# Combine to one dataset --------------------------------------------------
combined.pos <- Area_HILIC.POS_B12.Inc %>%
left_join(Mz_HILIC.POS_B12.Inc) %>%
left_join(SN_HILIC.POS_B12.Inc) %>%
left_join(RT_HILIC.POS_B12.Inc) %>%
mutate(Column = "HILICPos") %>%
select(Replicate.Name, Column, Area.Value, MZ.Value, RT.Value, SN.Value, everything())
combined.neg <- Area_HILIC.NEG_B12.Inc %>%
left_join(Mz_HILIC.NEG_B12.Inc) %>%
left_join(SN_HILIC.NEG_B12.Inc) %>%
left_join(RT_HILIC.NEG_B12.Inc) %>%
mutate(Column = "HILICNeg") %>%
select(Replicate.Name, Column, Area.Value, MZ.Value, RT.Value, SN.Value, everything())
combined <- rbind(combined.pos, combined.neg) %>%
mutate(Metabolite.name = ifelse(str_detect(Metabolite.name, "Ingalls_"), sapply(strsplit(Metabolite.name, "_"), `[`, 2), Metabolite.name))
combined$Replicate.Name <- gsub("^.{0,1}", "", combined$Replicate.Name)
rm(list = ls()[!ls() %in% c("combined", lsf.str())])
# Quality control script
area.min   <- 1000
RT.flex    <- 0.4
blk.thresh <- 0.3
SN.min     <- 4
msdial.runtypes <- IdentifyRunTypes(combined)
combined <- combined %>%
select(Replicate.Name:Alignment.ID, Metabolite.name) %>%
mutate(Run.Type = (tolower(str_extract(combined$Replicate.Name, "(?<=_)[^_]+(?=_)"))))
RT.table <- combined %>%
filter(Run.Type == "std") %>%
arrange(Metabolite.name) %>%
group_by(Metabolite.name) %>%
mutate(RT.min = min(RT.Value, na.rm = TRUE)) %>%
mutate(RT.max = max(RT.Value, na.rm = TRUE)) %>%
select(Metabolite.name:RT.max) %>%
unique()
blank.table <- combined %>%
filter(Run.Type == "blk") %>%
mutate(Blk.Area = Area.Value) %>%
arrange(Metabolite.name) %>%
group_by(Metabolite.name) %>%
mutate(Blk.min = min(Area.Value)) %>%
mutate(Blk.max = max(Area.Value)) %>%
select(Metabolite.name:Blk.max) %>%
select(-Blk.Area) %>%
unique()
# Create datasets for different flag types.
SN.Area.Flags <- combined %>%
arrange(Metabolite.name) %>%
mutate(SN.Flag       = ifelse(((SN.Value) < SN.min), "SN.Flag", NA)) %>%
mutate(Area.Min.Flag = ifelse((Area.Value < area.min), "Area.Min.Flag", NA))
# Joining datasets---------------------------------------
add.RT.Flag <- SN.Area.Flags %>%
group_by(Metabolite.name) %>%
left_join(RT.table, by = c("Metabolite.name", "Run.Type")) %>%
mutate(RT.Flag = ifelse((RT.Value >= (RT.max + RT.flex) | RT.Value <= (RT.min - RT.flex)), "RT.Flag", NA)) %>%
select(-c("RT.max", "RT.min"))
add.blk.Flag <- add.RT.Flag %>%
left_join(blank.table, by = c("Metabolite.name", "Run.Type")) %>%
mutate(Blank.Flag = ifelse((Area.Value / Blk.max) < blk.thresh, "Blank.Flag", NA)) %>%
select(-c("Blk.min", "Blk.max"))
# Finally, combine all the flags.
final.table <- add.blk.Flag %>%
mutate(all.Flags      = paste(SN.Flag, Area.Min.Flag, RT.Flag, Blank.Flag, sep = ", ")) %>%
mutate(all.Flags      = as.character(all.Flags %>% str_remove_all("NA, ") %>% str_remove_all("NA"))) %>%
mutate(Area.with.QC   = ifelse(is.na(Area.Min.Flag), Area.Value, NA)) %>%
select(Replicate.Name:Area.Value, Area.with.QC, everything()) %>%
ungroup(Metabolite.name) %>%
mutate(Metabolite.name = as.character(Metabolite.name))
# Print to file with comments and new name!
Description <- c("Hello! Welcome to the world of MSDIAL QE Quality Control! ",
"Minimum area for a real peak: ",
"RT flexibility: ",
"Blank can be this fraction of a sample: ",
"S/N ratio: " ,
"Processed on: ")
Value <- c(NA, area.min, RT.flex, blk.thresh, SN.min, Sys.time())
df <- data.frame(Description, Value)
final.table <- bind_rows(df, final.table)
rm(list = ls()[!ls() %in% c("final.table", lsf.str())])
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/QC_Output_", currentDate, ".csv", sep = "")
write.csv(final.table, csvFileName, row.names = FALSE)
# Things to Return --------------------------------------------------------
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.HILIC.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = '*.csv'))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Match QC'd HILIC data with Internal Standards list -----------------------------------------------------------------
HILIC.withIS <- HILIC.QC %>%
filter(Metabolite.name %in% Internal.Standards$Compound.Name)
HILIC.NoIS <- HILIC.QC %>%
filter(!Metabolite.name %in% Internal.Standards$Compound.Name)
# Create HILICs Internal Standard data -----------------------------------------------------------------
HILIC.IS.data <- HILIC.withIS %>%
select(Replicate.Name, Metabolite.name, Area.with.QC) %>%
mutate(Mass.Feature = Metabolite.name) %>%
select(-Metabolite.name)
#filter(!MassFeature == "Guanosine Monophosphate, 15N5")
# Add injection volume -----------------------------------------------------------------
# SHOULD THIS GO AT THE TOP
SampKey <- SampKey.all %>%
filter(Replicate.Name %in% HILIC.IS.data$Replicate.Name) %>%
select(Replicate.Name, Bio.Normalization) %>%
mutate(Mass.Feature = "Inj_vol",
Area.with.QC = Bio.Normalization) %>%
select(Replicate.Name, Area.with.QC, Mass.Feature)
# Create Internal standard data to identify problematic compounds/replicates-----------------------------------------------------------------
HILIC.IS.data <- rbind(HILIC.IS.data, SampKey)
# here is where we would hypothetically remove troublesome compounds.
# Identify internal standards without an Area, i.e. any NA values.
IS.Issues <- HILIC.IS.data[is.na(HILIC.IS.data$Area.with.QC), ]
# Visualize raw areas of Internal Standards -----------------------------------------------------------------
IS.Raw.Area.Plot <- ggplot(HILIC.IS.data, aes(x = Replicate.Name, y = Area.with.QC)) +
geom_bar(stat = "identity") +
facet_wrap( ~Mass.Feature, scales = "free_y") +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 10),
legend.position = "top",
strip.text = element_text(size = 10))+
ggtitle("Internal Standard Raw Areas")
print(IS.Raw.Area.Plot)
HILIC.long  <- HILIC.NoIS %>%
rename(Mass.Feature = Metabolite.name) %>%
select(Replicate.Name, Mass.Feature, Area.with.QC) %>%
arrange(Replicate.Name)
View(HILIC.IS.data)
View(HILIC.long)
print(unique(HILIC.long$Replicate.Name))
print(unique(HILIC.IS.data$Replicate.Name))
test1 <- print(unique(HILIC.long$Replicate.Name))
test_isdata <- print(unique(HILIC.IS.data$Replicate.Name))
test_long <- print(unique(HILIC.long$Replicate.Name))
rm(test1)
class(test_isdata)
class(test_long)
identical(test_isdata, test_long)
test_isdata <- sort(test_isdata)
test_long <- sort(test_long)
identical(test_isdata, test_long)
test_isdata <- sort(unique(HILIC.IS.data$Replicate.Name))
test_long <- sort(unique(HILIC.long))
identical(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
test_isdata <- sort(unique(HILIC.IS.data$Replicate.Name))
test_long <- sort(unique(HILIC.long$Replicate.Name))
identical(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
all_equal(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
all_equal(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
## Function definitions ##
# TODO --------------------------------------------------------
# Organize directory referencing a little easier? Set value ahead of time?
# Nested loop or list comprehension for renaming the uploads. Functions?
# Order function descriptions neatly at beginning of script.
# Cleanly name items in the upload, rather than manually changing it to SN, RZ, etc.
# Figure out a better way to choose columns out of MSDIAL
# Add documentation and comments to clarify the process.
# Make function for always downloading the most up to date Ingalls lab standards.
# Figure out a way to preserve the QC parameter values.
# Fix the StandardizeVariables function
library(ggplot2)
library(rlist)
library(stringr)
library(tidyverse)
library(tidyr)
options(scipen=999)
SetHeader <- function(df) {
df <- df[!(is.na(df[1]) | df[1]==""), ]
colnames(df) <- make.names(as.character(unlist(df[1,])))
df <- df[-1, ]
return(df)
}
FilterUnknowns <- function(df) {
df <- df %>%
filter(Metabolite.name != 'Unknown') %>%
select(-c(Average.Rt.min., Formula, Ontology, INCHIKEY, SMILES, Isotope.tracking.parent.ID, Isotope.tracking.weight.number,
MS1.isotopic.spectrum, MS.MS.spectrum, Average.Mz, Post.curation.result, Fill.., Annotation.tag..VS1.0., RT.matched,
m.z.matched, MS.MS.matched, Manually.modified, Total.score:Fragment.presence..))
}
RemoveCsv <- function(full.filepaths) {
no.path <- substr(full.filepaths, 1, nchar(full.filepaths)-4)
no.ID <-   gsub("\\_.*","", no.path)
return(no.path)
}
ChangeClasses <- function(df) {
for (i in c(10:ncol(df))) {
df[, i] <- as.numeric(as.character(df[, i]))
}
return(df)
}
IdentifyRunTypes <- function(msdial.file) {
# Identify run typfes and return each unique value present in the Skyline output.
#
# Args
#   msdial.file: Raw output file from Skyline.
#
# Returns
#   run.type: list of labels identifying the run types, isolated from Replicate.Name.
#   Options conssist of samples (smp), pooled (poo), standards (std), and blanks (blk).
#
run.type <- tolower(str_extract(msdial.file$Replicate.Name, "(?<=_)[^_]+(?=_)"))
print(paste("Your runtypes are:", toString(unique(run.type))))
}
TrimWhitespace <- function (x) gsub("^\\s+|\\s+$", "", x)
StandardizeVariables <- function(df) {
if (c("ReplicateName", "AreaValue", "MZValue", "RTValue", "SNValue") %in% colnames(df))
{
df <- df %>%
rename(Replicate.Name = ReplicateName) %>%
rename(Area.Value = AreaValue) %>%
rename(MZ.Value = MZValue) %>%
rename(RT.Value = RTValue) %>%
rename(SN.Value = SNValue)
}
return(df)
}
# Do we need this function?
CheckBlankMatcher <- function(blank.matcher) {
# Takes a blank matcher file and separates any multi-value variable
# columns into their own row.
#
# Args:
#   blank.matcher: CSV entered by user to match samples with
#   appropriate blanks.
#
# Returns:
#   blank.matcher: new CSV with any duplicate values separated
#   into their own rows.
#
blank.matcher <- do.call("rbind", Map(data.frame,
Blank.Name = strsplit(as.character(blank.matcher$Blank.Name), ","),
Replicate.Name = (blank.matcher$Replicate.Name))
)
blank.matcher <- blank.matcher[c(2, 1)]
return(blank.matcher)
}
# Things to Return --------------------------------------------------------
source("B12_Inc_Functions.R")
# IS_inspectPlot (plot to make sure there aren't any internal standards we should kick out)
# QuickReport (% that picked BMIS, with cut off values)
# ISTest_plot (plot to evaluate if you cut off is appropriate)
# BMIS_normalizedData (tibble with the info you actually want!)
# Set parameters -----------------------------------------------------------------
cut.off <- 0.3 # 30% decrease in RSD of pooled injections, aka improvement cutoff
cut.off2 <- 0.1 # RSD minimum
# Imports -----------------------------------------------------------------
# Sample Key
SampKey.all <- read.csv("data_extras/Sample.Key.HILIC.csv") %>%
rename(Replicate.Name = Sample.Name) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Internal Standards
Internal.Standards <- read.csv("data_extras/Ingalls_Lab_Standards.csv") %>%
filter(Column == "HILIC") %>%
filter(Compound.Type == "Internal Standard")
Internal.Standards$Compound.Name <- TrimWhitespace(Internal.Standards$Compound.Name)
# QC'd HILIC output
filename <- RemoveCsv(list.files(path = 'data_processed/', pattern = '*.csv'))
filepath <- file.path('data_processed', paste(filename, ".csv", sep = ""))
HILIC.QC <- assign(make.names(filename), read.csv(filepath, stringsAsFactors = FALSE, header = TRUE)) %>%
slice(-1:-6) %>%
select(-c(Description, Value)) %>%
filter(!str_detect(Replicate.Name, "Blk|Std")) %>%
mutate(Replicate.Name = Replicate.Name %>%
str_replace("-","."))
# Match QC'd HILIC data with Internal Standards list -----------------------------------------------------------------
HILIC.withIS <- HILIC.QC %>%
filter(Metabolite.name %in% Internal.Standards$Compound.Name)
HILIC.NoIS <- HILIC.QC %>%
filter(!Metabolite.name %in% Internal.Standards$Compound.Name)
# Create HILICs Internal Standard data -----------------------------------------------------------------
HILIC.IS.data <- HILIC.withIS %>%
select(Replicate.Name, Metabolite.name, Area.with.QC) %>%
mutate(Mass.Feature = Metabolite.name) %>%
select(-Metabolite.name)
#filter(!MassFeature == "Guanosine Monophosphate, 15N5")
# Add injection volume -----------------------------------------------------------------
# SHOULD THIS GO AT THE TOP
SampKey <- SampKey.all %>%
filter(Replicate.Name %in% HILIC.IS.data$Replicate.Name) %>%
select(Replicate.Name, Bio.Normalization) %>%
mutate(Mass.Feature = "Inj_vol",
Area.with.QC = Bio.Normalization) %>%
select(Replicate.Name, Area.with.QC, Mass.Feature)
# Create Internal standard data to identify problematic compounds/replicates-----------------------------------------------------------------
HILIC.IS.data <- rbind(HILIC.IS.data, SampKey)
# here is where we would hypothetically remove troublesome compounds.
# Identify internal standards without an Area, i.e. any NA values.
IS.Issues <- HILIC.IS.data[is.na(HILIC.IS.data$Area.with.QC), ]
# Visualize raw areas of Internal Standards -----------------------------------------------------------------
IS.Raw.Area.Plot <- ggplot(HILIC.IS.data, aes(x = Replicate.Name, y = Area.with.QC)) +
geom_bar(stat = "identity") +
facet_wrap( ~Mass.Feature, scales = "free_y") +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 10),
legend.position = "top",
strip.text = element_text(size = 10))+
ggtitle("Internal Standard Raw Areas")
#print(IS.Raw.Area.Plot)
# Edit data so names match-----------------------------------------------------------------
HILIC.long  <- HILIC.NoIS %>%
rename(Mass.Feature = Metabolite.name) %>%
select(Replicate.Name, Mass.Feature, Area.with.QC) %>%
arrange(Replicate.Name)
test_isdata <- unique(HILIC.IS.data$Replicate.Name)
test_long <- unique(HILIC.long$Replicate.Name)
test_isdata <- unique(HILIC.IS.data$Replicate.Name)
test_long <- unique(HILIC.long$Replicate.Name)
test_isdata <- sort(test_isdata)
test_long <- sort(test_long)
identical(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
# Test that names are equal across sample sets-----------------------------------------------------------------
test_isdata <- as.data.frame(sort(unique(HILIC.IS.data$Replicate.Name)))
test_long <- as.data.frame(sort(unique(HILIC.long$Replicate.Name)))
identical(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
View(test_isdata)
View(test_long)
test_isdata <- as.data.frame(sort(unique(HILIC.IS.data$Replicate.Name)), stringsAsFactors = FALSE)
test_long <- as.data.frame(sort(unique(HILIC.long$Replicate.Name)), stringsAsFactors = FALSE)
identical(HILIC.IS.data$Replicate.Name, HILIC.long$Replicate.Name)
View(test_isdata)
View(test_long)
test_isdata[1]
test_isdata[1] == test_long[1]
output <- test_isdata[1] == test_long[1]
TRUE %in% output
which(output, arr.ind = FALSE)
